# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, filedialog
from tkinter import *
from imageencode import insert, extract
from PIL import ImageTk,Image
import tkinter as tk
from tkVideoPlayer import TkinterVideo


input_file = ''
payload_file = ''
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"/Users/veleonlim/Downloads/build/assets/frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


def upload_file():
    file_path = filedialog.askopenfilename()
    print(file_path)

    if file_path:
        file_extension = Path(file_path).suffix.lower()
        print("File extension:", file_extension)

        if file_extension == ".mp4":
            videoplayer.load(file_path)
            videoplayer.play()
            videoplayer_frame.place(x=39, y=118, width=160, height=160)
        elif file_extension == ".png":
            videoplayer.stop()
            videoplayer_frame.place_forget()

            image = Image.open(file_path)
            image.thumbnail((160, 160))
            photo = ImageTk.PhotoImage(image)

            label = tk.Label(canvas, image=photo)
            label.image = photo
            label.place(x=39, y=118)
        else:
            print("Unsupported file format")

    global input_file
    # file_path = filedialog.askopenfilename()
    input_file = str(file_path)
    print(input_file)


def payload_file():
    global payload_file
    file_path = filedialog.askopenfilename()
    payload_file = str(file_path)
    print(payload_file)


def run_extraction(path):
    print("file:", path)
    extract_path = path
    msg = extract(extract_path)
    # Do something with the extracted message (e.g., display it in the GUI)
    print("???", msg)  # Example: printing the extracted message
    canvas.itemconfigure(text_item, text=msg)  # Update the text item in the canvas

window = Tk()

window.geometry("666x829")
window.configure(bg="#FFFFFF")

canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=829,
    width=666,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)

canvas.place(x=0, y=0)

videoplayer_frame = tk.Frame(canvas, bg="white")
videoplayer_frame.place(x=39, y=118, width=160, height=160)

videoplayer = TkinterVideo(master=videoplayer_frame, scaled=True)

videoplayer.pack(expand=True, fill="both")
canvas.create_rectangle(
    39.0,
    118.0,
    199.0,
    278.0,
    fill="#D9D9D9",
    outline="")

canvas.create_rectangle(
    242.0,
    119.0,
    402.0,
    279.0,
    fill="#D9D9D9",
    outline="")

canvas.create_rectangle(
    131.0,
    410.0,
    572.0,
    716.0,
    fill="#D9D9D9",
    outline="")


text_item = canvas.create_text(
    131.0,
    410.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter", 12 * -1)
    )

canvas.create_text(
    39.0,
    92.0,
    anchor="nw",
    text="Cover Object / Stego",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    39.0,
    36.0,
    anchor="nw",
    text="Step 1: Upload File",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    242.0,
    35.0,
    anchor="nw",
    text="Step 2: Upload Payload",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    471.0,
    34.0,
    anchor="nw",
    text="Step 3: Select Number of LSB",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    470.0,
    170.0,
    anchor="nw",
    text="Step 4: Encode or Decode",
    fill="#000000",
    font=("Inter Bold", 12 * -1)
)

canvas.create_text(
    242.0,
    92.0,
    anchor="nw",
    text="Payload",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    319.0,
    374.0,
    anchor="nw",
    text="Output",
    fill="#000000",
    font=("Inter", 12 * -1)
)

canvas.create_text(
    474.0,
    92.0,
    anchor="nw",
    text="Number of LSB (0-5)",
    fill="#000000",
    font=("Inter", 12 * -1)
)

# button_image_1 = PhotoImage(
#     file=relative_to_assets("button_1.png"))
button_1 = Button(
    # image=button_image_1,
    text="Upload",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (upload_file(), print("button_1 clicked")),
    relief="flat"
)

button_1.place(
    x=116.0,
    y=305.0,
    width=83.0,
    height=35.0
)

# button_image_2 = PhotoImage(
#     file=relative_to_assets("button_2.png"))
button_2 = Button(
    # image=button_image_2,
    text="Upload",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: (payload_file(), print("button_2 clicked")),
    relief="flat"
)
button_2.place(
    x=318.0,
    y=305.0,
    width=83.0,
    height=35.0
)

# button_image_3 = PhotoImage(
#     file=relative_to_assets("button_3.png"))
button_3 = Button(
    # image=button_image_3,
    text="encode",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: insert(input_file, payload_file),
    relief="flat"
)

button_3.place(
    x=472.0,
    y=206.0,
    width=152.0,
    height=35.0
)

# button_image_4 = PhotoImage(
#     file=relative_to_assets("button_4.png"))
button_4 = Button(
    # image=button_image_4,
    text="decode",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: run_extraction(input_file),
    relief="flat"
)
button_4.place(
    x=472.0,
    y=258.0,
    width=152.0,
    height=34.0
)

canvas.create_rectangle(
    472.0,
    115.0,
    624.0,
    141.0,
    fill="#D9D9D9",
    outline="")

window.resizable(False, False)
window.mainloop()
